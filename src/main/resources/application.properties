spring.application.name=CryptoSandbox

# Configuración de la base de datos
spring.datasource.url=jdbc:postgresql://cryptopruebas.cpxhmby4ngsl.us-east-1.rds.amazonaws.com:5432/cryptos
spring.datasource.username=postgres
spring.datasource.password=12345687

#Hibernate
# Indicamos que vamos a usar PostgreSQL como gestor de base de datos
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# Indicamos que Hibernate debe actualizar las tablas / columnas automáticamente cuando hagamos cambios en las entidades
# (por ejemplo, añadir una nueva columna)
spring.jpa.hibernate.ddl-auto=update

# Mostramos las sentencias SQL que Hibernate ejecuta en la consola
logging.level.org.hibernate.SQL=DEBUG

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

spring.security.oauth2.client.registration.google.client-id=542292481741-5u8ot5pngurg5fjpagl5bog16pv8aj54.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://cryptosandbox-env-2.eba-97dmkjkv.us-east-1.elasticbeanstalk.com/login/oauth2/code/google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
